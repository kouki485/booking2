{"ast":null,"code":"import { db } from './firebase';\nimport { collection, addDoc, query, where, getDocs, doc, getDoc, orderBy, limit, updateDoc, deleteDoc, setDoc } from 'firebase/firestore';\nimport { DEFAULT_BUSINESS_HOURS } from '../utils/initData';\n\n/**\n * 予約を作成\n */\nexport const createBooking = async bookingData => {\n  try {\n    const bookingRef = await addDoc(collection(db, 'bookings'), {\n      ...bookingData,\n      createdAt: new Date().toISOString(),\n      status: 'confirmed'\n    });\n    return {\n      success: true,\n      id: bookingRef.id\n    };\n  } catch (error) {\n    console.error('予約作成エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約一覧を取得\n */\nexport const getBookings = async (date = null) => {\n  try {\n    let q = collection(db, 'bookings');\n    if (date) {\n      q = query(collection(db, 'bookings'), where('date', '==', date), orderBy('time', 'asc'));\n    } else {\n      q = query(collection(db, 'bookings'), orderBy('createdAt', 'desc'), limit(100));\n    }\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('予約取得エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 特定の日付と時間の予約数を取得\n */\nexport const getBookingCount = async (date, time) => {\n  try {\n    const q = query(collection(db, 'bookings'), where('date', '==', date), where('time', '==', time), where('status', '==', 'confirmed'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.size;\n  } catch (error) {\n    console.error('予約数取得エラー:', error);\n    return 0;\n  }\n};\n\n/**\n * 重複予約をチェック\n */\nexport const checkDuplicateBooking = async (customerName, date, time) => {\n  try {\n    const q = query(collection(db, 'bookings'), where('customerName', '==', customerName), where('date', '==', date), where('time', '==', time), where('status', '==', 'confirmed'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.size > 0;\n  } catch (error) {\n    console.error('重複チェックエラー:', error);\n    return false;\n  }\n};\n\n/**\n * 営業時間を取得\n */\nexport const getBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    const businessHoursDoc = await getDoc(businessHoursRef);\n    if (businessHoursDoc.exists()) {\n      const data = businessHoursDoc.data();\n      return data.hours || DEFAULT_BUSINESS_HOURS;\n    } else {\n      // ドキュメントが存在しない場合、デフォルト値を返す\n      console.warn('営業時間データが見つかりません。デフォルト値を使用します');\n      return DEFAULT_BUSINESS_HOURS;\n    }\n  } catch (error) {\n    console.error('営業時間取得エラー:', error);\n\n    // エラーが発生した場合、LocalStorageから取得を試行\n    try {\n      const savedHours = localStorage.getItem('businessHours');\n      if (savedHours) {\n        console.log('LocalStorageから営業時間を取得しました');\n        return JSON.parse(savedHours);\n      }\n    } catch (localStorageError) {\n      console.warn('LocalStorageからの取得に失敗:', localStorageError);\n    }\n\n    // すべて失敗した場合、デフォルト値を返す\n    console.warn('営業時間の取得に失敗しました。デフォルト値を使用します');\n    return DEFAULT_BUSINESS_HOURS;\n  }\n};\n\n/**\n * 営業時間を更新\n */\nexport const updateBusinessHours = async businessHours => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    await updateDoc(businessHoursRef, {\n      hours: businessHours,\n      updatedAt: new Date().toISOString()\n    });\n\n    // LocalStorageにも保存\n    try {\n      localStorage.setItem('businessHours', JSON.stringify(businessHours));\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('営業時間更新エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約を更新\n */\nexport const updateBooking = async (bookingId, updates) => {\n  try {\n    const bookingRef = doc(db, 'bookings', bookingId);\n    await updateDoc(bookingRef, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('予約更新エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約を削除\n */\nexport const deleteBooking = async bookingId => {\n  try {\n    const bookingRef = doc(db, 'bookings', bookingId);\n    await deleteDoc(bookingRef);\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('予約削除エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 日付範囲の予約を取得\n */\nexport const getBookingsByDateRange = async (startDate, endDate) => {\n  try {\n    const q = query(collection(db, 'bookings'), where('date', '>=', startDate), where('date', '<=', endDate), orderBy('date', 'asc'), orderBy('time', 'asc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('期間別予約取得エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約統計を取得\n */\nexport const getBookingStats = async (month = null) => {\n  try {\n    let q;\n    if (month) {\n      const startDate = `${month}-01`;\n      const endDate = `${month}-31`;\n      q = query(collection(db, 'bookings'), where('date', '>=', startDate), where('date', '<=', endDate), where('status', '==', 'confirmed'));\n    } else {\n      q = query(collection(db, 'bookings'), where('status', '==', 'confirmed'));\n    }\n    const querySnapshot = await getDocs(q);\n    const bookings = querySnapshot.docs.map(doc => doc.data());\n    return {\n      total: bookings.length,\n      thisMonth: bookings.filter(booking => {\n        const bookingMonth = booking.date.substring(0, 7);\n        const currentMonth = new Date().toISOString().substring(0, 7);\n        return bookingMonth === currentMonth;\n      }).length,\n      bookings\n    };\n  } catch (error) {\n    console.error('予約統計取得エラー:', error);\n    return {\n      total: 0,\n      thisMonth: 0,\n      bookings: []\n    };\n  }\n};\n\n// 時間スロットを生成する関数\nexport const generateTimeSlots = (startTime, endTime, intervalMinutes = 30) => {\n  const slots = [];\n  const start = new Date(`2000-01-01T${startTime}:00`);\n  const end = new Date(`2000-01-01T${endTime}:00`);\n  while (start < end) {\n    const timeString = start.toTimeString().substring(0, 5);\n    slots.push(timeString);\n    start.setMinutes(start.getMinutes() + intervalMinutes);\n  }\n  return slots;\n};\n\n// 日付文字列をフォーマットする関数\nexport const formatDateString = dateString => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ja-JP', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long'\n  });\n};\n\n// 時間文字列をフォーマットする関数\nexport const formatTimeString = timeString => {\n  return timeString;\n};\n\n// 営業日かどうかを判定する関数\nexport const isBusinessDay = (date, businessHours) => {\n  var _businessHours$dayKey;\n  const dayOfWeek = new Date(date).toLocaleDateString('ja-JP', {\n    weekday: 'long'\n  });\n  const dayKey = dayOfWeek.replace('曜日', '');\n  return ((_businessHours$dayKey = businessHours[dayKey]) === null || _businessHours$dayKey === void 0 ? void 0 : _businessHours$dayKey.isOpen) || false;\n};\n\n// 営業時間内かどうかを判定する関数\nexport const isBusinessHours = (time, date, businessHours) => {\n  const dayOfWeek = new Date(date).toLocaleDateString('ja-JP', {\n    weekday: 'long'\n  });\n  const dayKey = dayOfWeek.replace('曜日', '');\n  const dayInfo = businessHours[dayKey];\n  if (!dayInfo || !dayInfo.isOpen) {\n    return false;\n  }\n  return time >= dayInfo.open && time <= dayInfo.close;\n};","map":{"version":3,"names":["db","collection","addDoc","query","where","getDocs","doc","getDoc","orderBy","limit","updateDoc","deleteDoc","setDoc","DEFAULT_BUSINESS_HOURS","createBooking","bookingData","bookingRef","createdAt","Date","toISOString","status","success","id","error","console","getBookings","date","q","querySnapshot","docs","map","data","getBookingCount","time","size","checkDuplicateBooking","customerName","getBusinessHours","businessHoursRef","businessHoursDoc","exists","hours","warn","savedHours","localStorage","getItem","log","JSON","parse","localStorageError","updateBusinessHours","businessHours","updatedAt","setItem","stringify","updateBooking","bookingId","updates","deleteBooking","getBookingsByDateRange","startDate","endDate","getBookingStats","month","bookings","total","length","thisMonth","filter","booking","bookingMonth","substring","currentMonth","generateTimeSlots","startTime","endTime","intervalMinutes","slots","start","end","timeString","toTimeString","push","setMinutes","getMinutes","formatDateString","dateString","toLocaleDateString","year","day","weekday","formatTimeString","isBusinessDay","_businessHours$dayKey","dayOfWeek","dayKey","replace","isOpen","isBusinessHours","dayInfo","open","close"],"sources":["/Users/koukikaida/Desktop/booking/src/services/bookingService.js"],"sourcesContent":["import { db } from './firebase';\nimport { \n  collection, \n  addDoc, \n  query, \n  where, \n  getDocs, \n  doc, \n  getDoc, \n  orderBy, \n  limit,\n  updateDoc,\n  deleteDoc,\n  setDoc\n} from 'firebase/firestore';\nimport { DEFAULT_BUSINESS_HOURS } from '../utils/initData';\n\n/**\n * 予約を作成\n */\nexport const createBooking = async (bookingData) => {\n  try {\n    const bookingRef = await addDoc(collection(db, 'bookings'), {\n      ...bookingData,\n      createdAt: new Date().toISOString(),\n      status: 'confirmed'\n    });\n    \n    return { success: true, id: bookingRef.id };\n  } catch (error) {\n    console.error('予約作成エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約一覧を取得\n */\nexport const getBookings = async (date = null) => {\n  try {\n    let q = collection(db, 'bookings');\n    \n    if (date) {\n      q = query(\n        collection(db, 'bookings'),\n        where('date', '==', date),\n        orderBy('time', 'asc')\n      );\n    } else {\n      q = query(\n        collection(db, 'bookings'),\n        orderBy('createdAt', 'desc'),\n        limit(100)\n      );\n    }\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('予約取得エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 特定の日付と時間の予約数を取得\n */\nexport const getBookingCount = async (date, time) => {\n  try {\n    const q = query(\n      collection(db, 'bookings'),\n      where('date', '==', date),\n      where('time', '==', time),\n      where('status', '==', 'confirmed')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.size;\n  } catch (error) {\n    console.error('予約数取得エラー:', error);\n    return 0;\n  }\n};\n\n/**\n * 重複予約をチェック\n */\nexport const checkDuplicateBooking = async (customerName, date, time) => {\n  try {\n    const q = query(\n      collection(db, 'bookings'),\n      where('customerName', '==', customerName),\n      where('date', '==', date),\n      where('time', '==', time),\n      where('status', '==', 'confirmed')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.size > 0;\n  } catch (error) {\n    console.error('重複チェックエラー:', error);\n    return false;\n  }\n};\n\n/**\n * 営業時間を取得\n */\nexport const getBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    const businessHoursDoc = await getDoc(businessHoursRef);\n    \n    if (businessHoursDoc.exists()) {\n      const data = businessHoursDoc.data();\n      return data.hours || DEFAULT_BUSINESS_HOURS;\n    } else {\n      // ドキュメントが存在しない場合、デフォルト値を返す\n      console.warn('営業時間データが見つかりません。デフォルト値を使用します');\n      return DEFAULT_BUSINESS_HOURS;\n    }\n  } catch (error) {\n    console.error('営業時間取得エラー:', error);\n    \n    // エラーが発生した場合、LocalStorageから取得を試行\n    try {\n      const savedHours = localStorage.getItem('businessHours');\n      if (savedHours) {\n        console.log('LocalStorageから営業時間を取得しました');\n        return JSON.parse(savedHours);\n      }\n    } catch (localStorageError) {\n      console.warn('LocalStorageからの取得に失敗:', localStorageError);\n    }\n    \n    // すべて失敗した場合、デフォルト値を返す\n    console.warn('営業時間の取得に失敗しました。デフォルト値を使用します');\n    return DEFAULT_BUSINESS_HOURS;\n  }\n};\n\n/**\n * 営業時間を更新\n */\nexport const updateBusinessHours = async (businessHours) => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    await updateDoc(businessHoursRef, {\n      hours: businessHours,\n      updatedAt: new Date().toISOString()\n    });\n    \n    // LocalStorageにも保存\n    try {\n      localStorage.setItem('businessHours', JSON.stringify(businessHours));\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n    \n    return { success: true };\n  } catch (error) {\n    console.error('営業時間更新エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約を更新\n */\nexport const updateBooking = async (bookingId, updates) => {\n  try {\n    const bookingRef = doc(db, 'bookings', bookingId);\n    await updateDoc(bookingRef, {\n      ...updates,\n      updatedAt: new Date().toISOString()\n    });\n    \n    return { success: true };\n  } catch (error) {\n    console.error('予約更新エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約を削除\n */\nexport const deleteBooking = async (bookingId) => {\n  try {\n    const bookingRef = doc(db, 'bookings', bookingId);\n    await deleteDoc(bookingRef);\n    \n    return { success: true };\n  } catch (error) {\n    console.error('予約削除エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 日付範囲の予約を取得\n */\nexport const getBookingsByDateRange = async (startDate, endDate) => {\n  try {\n    const q = query(\n      collection(db, 'bookings'),\n      where('date', '>=', startDate),\n      where('date', '<=', endDate),\n      orderBy('date', 'asc'),\n      orderBy('time', 'asc')\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  } catch (error) {\n    console.error('期間別予約取得エラー:', error);\n    throw error;\n  }\n};\n\n/**\n * 予約統計を取得\n */\nexport const getBookingStats = async (month = null) => {\n  try {\n    let q;\n    \n    if (month) {\n      const startDate = `${month}-01`;\n      const endDate = `${month}-31`;\n      \n      q = query(\n        collection(db, 'bookings'),\n        where('date', '>=', startDate),\n        where('date', '<=', endDate),\n        where('status', '==', 'confirmed')\n      );\n    } else {\n      q = query(\n        collection(db, 'bookings'),\n        where('status', '==', 'confirmed')\n      );\n    }\n    \n    const querySnapshot = await getDocs(q);\n    const bookings = querySnapshot.docs.map(doc => doc.data());\n    \n    return {\n      total: bookings.length,\n      thisMonth: bookings.filter(booking => {\n        const bookingMonth = booking.date.substring(0, 7);\n        const currentMonth = new Date().toISOString().substring(0, 7);\n        return bookingMonth === currentMonth;\n      }).length,\n      bookings\n    };\n  } catch (error) {\n    console.error('予約統計取得エラー:', error);\n    return { total: 0, thisMonth: 0, bookings: [] };\n  }\n};\n\n// 時間スロットを生成する関数\nexport const generateTimeSlots = (startTime, endTime, intervalMinutes = 30) => {\n  const slots = [];\n  const start = new Date(`2000-01-01T${startTime}:00`);\n  const end = new Date(`2000-01-01T${endTime}:00`);\n  \n  while (start < end) {\n    const timeString = start.toTimeString().substring(0, 5);\n    slots.push(timeString);\n    start.setMinutes(start.getMinutes() + intervalMinutes);\n  }\n  \n  return slots;\n};\n\n// 日付文字列をフォーマットする関数\nexport const formatDateString = (dateString) => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ja-JP', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    weekday: 'long'\n  });\n};\n\n// 時間文字列をフォーマットする関数\nexport const formatTimeString = (timeString) => {\n  return timeString;\n};\n\n// 営業日かどうかを判定する関数\nexport const isBusinessDay = (date, businessHours) => {\n  const dayOfWeek = new Date(date).toLocaleDateString('ja-JP', { weekday: 'long' });\n  const dayKey = dayOfWeek.replace('曜日', '');\n  return businessHours[dayKey]?.isOpen || false;\n};\n\n// 営業時間内かどうかを判定する関数\nexport const isBusinessHours = (time, date, businessHours) => {\n  const dayOfWeek = new Date(date).toLocaleDateString('ja-JP', { weekday: 'long' });\n  const dayKey = dayOfWeek.replace('曜日', '');\n  const dayInfo = businessHours[dayKey];\n  \n  if (!dayInfo || !dayInfo.isOpen) {\n    return false;\n  }\n  \n  return time >= dayInfo.open && time <= dayInfo.close;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}