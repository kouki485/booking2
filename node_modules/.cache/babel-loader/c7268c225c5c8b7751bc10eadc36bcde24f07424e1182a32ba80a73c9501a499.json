{"ast":null,"code":"import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n// デフォルト対応可能時間データ\nexport const DEFAULT_AVAILABLE_HOURS = {\n  月: {\n    start: '10:00',\n    end: '17:00',\n    isAvailable: true\n  },\n  火: {\n    start: '10:00',\n    end: '17:00',\n    isAvailable: true\n  },\n  水: {\n    start: '10:00',\n    end: '17:00',\n    isAvailable: true\n  },\n  木: {\n    start: '10:00',\n    end: '17:00',\n    isAvailable: true\n  },\n  金: {\n    start: '10:00',\n    end: '17:00',\n    isAvailable: true\n  },\n  土: {\n    start: '10:00',\n    end: '16:00',\n    isAvailable: true\n  },\n  日: {\n    start: '10:00',\n    end: '16:00',\n    isAvailable: false\n  }\n};\n\n// 対応可能時間を初期化する関数\nexport const initializeAvailableHours = async () => {\n  try {\n    const availableHoursRef = doc(db, 'settings', 'availableHours');\n    const availableHoursDoc = await getDoc(availableHoursRef);\n    if (!availableHoursDoc.exists()) {\n      await setDoc(availableHoursRef, {\n        hours: DEFAULT_AVAILABLE_HOURS,\n        description: '実際に予約を受け付けることができる時間帯です',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      console.log('対応可能時間を初期化しました');\n    }\n  } catch (error) {\n    console.warn('対応可能時間の初期化エラー:', error);\n    // エラーが発生した場合、LocalStorageにデフォルト値を保存\n    try {\n      localStorage.setItem('availableHours', JSON.stringify(DEFAULT_AVAILABLE_HOURS));\n      console.log('LocalStorageに対応可能時間を保存しました');\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n  }\n};\n\n// すべてのデータを初期化する関数\nexport const initializeData = async () => {\n  try {\n    await initializeAvailableHours();\n  } catch (error) {\n    console.warn('データの初期化でエラーが発生しました:', error);\n  }\n};\n\n/**\n * 開発用：対応可能時間データを強制初期化\n */\nexport const resetAvailableHours = async () => {\n  try {\n    const availableHoursRef = doc(db, 'availableHours', 'default');\n    const initialAvailableHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    await setDoc(availableHoursRef, initialAvailableHours);\n    console.log('対応可能時間データをリセットしました');\n    return {\n      success: true,\n      message: '対応可能時間データをリセットしました',\n      data: initialAvailableHours\n    };\n  } catch (error) {\n    console.error('対応可能時間のリセットエラー:', error);\n    return {\n      success: false,\n      message: '対応可能時間のリセットに失敗しました',\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["doc","setDoc","getDoc","db","DEFAULT_AVAILABLE_HOURS","月","start","end","isAvailable","火","水","木","金","土","日","initializeAvailableHours","availableHoursRef","availableHoursDoc","exists","hours","description","createdAt","Date","toISOString","updatedAt","console","log","error","warn","localStorage","setItem","JSON","stringify","localStorageError","initializeData","resetAvailableHours","initialAvailableHours","monday","closed","open","close","tuesday","wednesday","thursday","friday","saturday","sunday","success","message","data"],"sources":["/Users/koukikaida/Desktop/booking/src/utils/initData.js"],"sourcesContent":["import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n// デフォルト対応可能時間データ\nexport const DEFAULT_AVAILABLE_HOURS = {\n  月: { start: '10:00', end: '17:00', isAvailable: true },\n  火: { start: '10:00', end: '17:00', isAvailable: true },\n  水: { start: '10:00', end: '17:00', isAvailable: true },\n  木: { start: '10:00', end: '17:00', isAvailable: true },\n  金: { start: '10:00', end: '17:00', isAvailable: true },\n  土: { start: '10:00', end: '16:00', isAvailable: true },\n  日: { start: '10:00', end: '16:00', isAvailable: false }\n};\n\n// 対応可能時間を初期化する関数\nexport const initializeAvailableHours = async () => {\n  try {\n    const availableHoursRef = doc(db, 'settings', 'availableHours');\n    const availableHoursDoc = await getDoc(availableHoursRef);\n    \n    if (!availableHoursDoc.exists()) {\n      await setDoc(availableHoursRef, {\n        hours: DEFAULT_AVAILABLE_HOURS,\n        description: '実際に予約を受け付けることができる時間帯です',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      console.log('対応可能時間を初期化しました');\n    }\n  } catch (error) {\n    console.warn('対応可能時間の初期化エラー:', error);\n    // エラーが発生した場合、LocalStorageにデフォルト値を保存\n    try {\n      localStorage.setItem('availableHours', JSON.stringify(DEFAULT_AVAILABLE_HOURS));\n      console.log('LocalStorageに対応可能時間を保存しました');\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n  }\n};\n\n// すべてのデータを初期化する関数\nexport const initializeData = async () => {\n  try {\n    await initializeAvailableHours();\n  } catch (error) {\n    console.warn('データの初期化でエラーが発生しました:', error);\n  }\n};\n\n/**\n * 開発用：対応可能時間データを強制初期化\n */\nexport const resetAvailableHours = async () => {\n  try {\n    const availableHoursRef = doc(db, 'availableHours', 'default');\n    \n    const initialAvailableHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    \n    await setDoc(availableHoursRef, initialAvailableHours);\n    console.log('対応可能時間データをリセットしました');\n    \n    return { \n      success: true, \n      message: '対応可能時間データをリセットしました',\n      data: initialAvailableHours \n    };\n    \n  } catch (error) {\n    console.error('対応可能時間のリセットエラー:', error);\n    return { \n      success: false, \n      message: '対応可能時間のリセットに失敗しました',\n      error: error.message \n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}