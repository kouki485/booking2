{"ast":null,"code":"import { signInWithEmailAndPassword, signOut, onAuthStateChanged, createUserWithEmailAndPassword, sendPasswordResetEmail } from 'firebase/auth';\nimport { auth } from './firebase';\n\n/**\n * メールアドレスとパスワードでログイン\n */\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: getErrorMessage(error.code)\n    };\n  }\n};\n\n/**\n * ログアウト\n */\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: getErrorMessage(error.code)\n    };\n  }\n};\n\n/**\n * 新規管理者アカウント作成（初期設定用）\n */\nexport const createAdminAccount = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return {\n      success: true,\n      user: userCredential.user\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: getErrorMessage(error.code)\n    };\n  }\n};\n\n/**\n * パスワードリセットメール送信\n */\nexport const sendPasswordReset = async email => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: getErrorMessage(error.code)\n    };\n  }\n};\n\n/**\n * 認証状態の監視\n */\nexport const onAuthChange = callback => {\n  return onAuthStateChanged(auth, callback);\n};\n\n/**\n * 現在のユーザーを取得\n */\nexport const getCurrentUser = () => {\n  return auth.currentUser;\n};\n\n/**\n * 管理者かどうかを確認\n * 簡単な実装：認証済みユーザーは全て管理者とする\n * 本格運用時はFirestoreでロール管理を実装\n */\nexport const isAdmin = user => {\n  return user !== null;\n};\n\n/**\n * エラーメッセージの日本語化\n */\nconst getErrorMessage = errorCode => {\n  switch (errorCode) {\n    case 'auth/user-not-found':\n      return 'ユーザーが見つかりません';\n    case 'auth/wrong-password':\n      return 'パスワードが間違っています';\n    case 'auth/invalid-email':\n      return 'メールアドレスの形式が正しくありません';\n    case 'auth/user-disabled':\n      return 'このアカウントは無効化されています';\n    case 'auth/too-many-requests':\n      return 'ログイン試行回数が多すぎます。しばらく待ってから再試行してください';\n    case 'auth/email-already-in-use':\n      return 'このメールアドレスは既に使用されています';\n    case 'auth/weak-password':\n      return 'パスワードは6文字以上で設定してください';\n    case 'auth/network-request-failed':\n      return 'ネットワークエラーが発生しました';\n    default:\n      return 'ログインに失敗しました';\n  }\n};","map":{"version":3,"names":["signInWithEmailAndPassword","signOut","onAuthStateChanged","createUserWithEmailAndPassword","sendPasswordResetEmail","auth","loginWithEmail","email","password","userCredential","success","user","error","getErrorMessage","code","logout","createAdminAccount","sendPasswordReset","onAuthChange","callback","getCurrentUser","currentUser","isAdmin","errorCode"],"sources":["/Users/koukikaida/Desktop/booking/src/services/authService.js"],"sourcesContent":["import { \n  signInWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail\n} from 'firebase/auth';\nimport { auth } from './firebase';\n\n/**\n * メールアドレスとパスワードでログイン\n */\nexport const loginWithEmail = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    return { \n      success: false, \n      error: getErrorMessage(error.code) \n    };\n  }\n};\n\n/**\n * ログアウト\n */\nexport const logout = async () => {\n  try {\n    await signOut(auth);\n    return { success: true };\n  } catch (error) {\n    return { \n      success: false, \n      error: getErrorMessage(error.code) \n    };\n  }\n};\n\n/**\n * 新規管理者アカウント作成（初期設定用）\n */\nexport const createAdminAccount = async (email, password) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    return { success: true, user: userCredential.user };\n  } catch (error) {\n    return { \n      success: false, \n      error: getErrorMessage(error.code) \n    };\n  }\n};\n\n/**\n * パスワードリセットメール送信\n */\nexport const sendPasswordReset = async (email) => {\n  try {\n    await sendPasswordResetEmail(auth, email);\n    return { success: true };\n  } catch (error) {\n    return { \n      success: false, \n      error: getErrorMessage(error.code) \n    };\n  }\n};\n\n/**\n * 認証状態の監視\n */\nexport const onAuthChange = (callback) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n/**\n * 現在のユーザーを取得\n */\nexport const getCurrentUser = () => {\n  return auth.currentUser;\n};\n\n/**\n * 管理者かどうかを確認\n * 簡単な実装：認証済みユーザーは全て管理者とする\n * 本格運用時はFirestoreでロール管理を実装\n */\nexport const isAdmin = (user) => {\n  return user !== null;\n};\n\n/**\n * エラーメッセージの日本語化\n */\nconst getErrorMessage = (errorCode) => {\n  switch (errorCode) {\n    case 'auth/user-not-found':\n      return 'ユーザーが見つかりません';\n    case 'auth/wrong-password':\n      return 'パスワードが間違っています';\n    case 'auth/invalid-email':\n      return 'メールアドレスの形式が正しくありません';\n    case 'auth/user-disabled':\n      return 'このアカウントは無効化されています';\n    case 'auth/too-many-requests':\n      return 'ログイン試行回数が多すぎます。しばらく待ってから再試行してください';\n    case 'auth/email-already-in-use':\n      return 'このメールアドレスは既に使用されています';\n    case 'auth/weak-password':\n      return 'パスワードは6文字以上で設定してください';\n    case 'auth/network-request-failed':\n      return 'ネットワークエラーが発生しました';\n    default:\n      return 'ログインに失敗しました';\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}