{"ast":null,"code":"import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n// デフォルト営業時間データ\nexport const DEFAULT_BUSINESS_HOURS = {\n  月: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  火: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  水: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  木: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  金: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  土: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: true\n  },\n  日: {\n    open: '09:00',\n    close: '17:00',\n    isOpen: false\n  }\n};\n\n// 営業時間を初期化する関数\nexport const initializeBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    const businessHoursDoc = await getDoc(businessHoursRef);\n    if (!businessHoursDoc.exists()) {\n      await setDoc(businessHoursRef, {\n        hours: DEFAULT_BUSINESS_HOURS,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      console.log('営業時間を初期化しました');\n    }\n  } catch (error) {\n    console.warn('営業時間の初期化エラー:', error);\n    // エラーが発生した場合、LocalStorageにデフォルト値を保存\n    try {\n      localStorage.setItem('businessHours', JSON.stringify(DEFAULT_BUSINESS_HOURS));\n      console.log('LocalStorageに営業時間を保存しました');\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n  }\n};\n\n// すべてのデータを初期化する関数\nexport const initializeData = async () => {\n  try {\n    await initializeBusinessHours();\n  } catch (error) {\n    console.warn('データの初期化でエラーが発生しました:', error);\n  }\n};\n\n/**\n * 開発用：営業時間データを強制初期化\n */\nexport const resetBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間データをリセットしました');\n    return {\n      success: true,\n      message: '営業時間データをリセットしました',\n      data: initialBusinessHours\n    };\n  } catch (error) {\n    console.error('営業時間のリセットエラー:', error);\n    return {\n      success: false,\n      message: '営業時間のリセットに失敗しました',\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["doc","setDoc","getDoc","db","DEFAULT_BUSINESS_HOURS","月","open","close","isOpen","火","水","木","金","土","日","initializeBusinessHours","businessHoursRef","businessHoursDoc","exists","hours","createdAt","Date","toISOString","updatedAt","console","log","error","warn","localStorage","setItem","JSON","stringify","localStorageError","initializeData","resetBusinessHours","initialBusinessHours","monday","closed","tuesday","wednesday","thursday","friday","saturday","sunday","success","message","data"],"sources":["/Users/koukikaida/Desktop/booking/src/utils/initData.js"],"sourcesContent":["import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n// デフォルト営業時間データ\nexport const DEFAULT_BUSINESS_HOURS = {\n  月: { open: '09:00', close: '17:00', isOpen: true },\n  火: { open: '09:00', close: '17:00', isOpen: true },\n  水: { open: '09:00', close: '17:00', isOpen: true },\n  木: { open: '09:00', close: '17:00', isOpen: true },\n  金: { open: '09:00', close: '17:00', isOpen: true },\n  土: { open: '09:00', close: '17:00', isOpen: true },\n  日: { open: '09:00', close: '17:00', isOpen: false }\n};\n\n// 営業時間を初期化する関数\nexport const initializeBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'settings', 'businessHours');\n    const businessHoursDoc = await getDoc(businessHoursRef);\n    \n    if (!businessHoursDoc.exists()) {\n      await setDoc(businessHoursRef, {\n        hours: DEFAULT_BUSINESS_HOURS,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n      console.log('営業時間を初期化しました');\n    }\n  } catch (error) {\n    console.warn('営業時間の初期化エラー:', error);\n    // エラーが発生した場合、LocalStorageにデフォルト値を保存\n    try {\n      localStorage.setItem('businessHours', JSON.stringify(DEFAULT_BUSINESS_HOURS));\n      console.log('LocalStorageに営業時間を保存しました');\n    } catch (localStorageError) {\n      console.warn('LocalStorageの保存に失敗:', localStorageError);\n    }\n  }\n};\n\n// すべてのデータを初期化する関数\nexport const initializeData = async () => {\n  try {\n    await initializeBusinessHours();\n  } catch (error) {\n    console.warn('データの初期化でエラーが発生しました:', error);\n  }\n};\n\n/**\n * 開発用：営業時間データを強制初期化\n */\nexport const resetBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n    \n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    \n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間データをリセットしました');\n    \n    return { \n      success: true, \n      message: '営業時間データをリセットしました',\n      data: initialBusinessHours \n    };\n    \n  } catch (error) {\n    console.error('営業時間のリセットエラー:', error);\n    return { \n      success: false, \n      message: '営業時間のリセットに失敗しました',\n      error: error.message \n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}