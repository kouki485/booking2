{"ast":null,"code":"import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n/**\n * 営業時間の初期データを設定\n */\nexport const initializeBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n\n    // 既存データの確認\n    const existingDoc = await getDoc(businessHoursRef);\n    if (existingDoc.exists()) {\n      console.log('営業時間データは既に存在します');\n      return {\n        success: true,\n        message: '営業時間データは既に存在します'\n      };\n    }\n\n    // 初期営業時間データ\n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間の初期データを設定しました');\n    return {\n      success: true,\n      message: '営業時間の初期データを設定しました',\n      data: initialBusinessHours\n    };\n  } catch (error) {\n    console.error('営業時間の初期化エラー:', error);\n    return {\n      success: false,\n      message: '営業時間の初期化に失敗しました',\n      error: error.message\n    };\n  }\n};\n\n/**\n * 開発用：営業時間データを強制初期化\n */\nexport const resetBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間データをリセットしました');\n    return {\n      success: true,\n      message: '営業時間データをリセットしました',\n      data: initialBusinessHours\n    };\n  } catch (error) {\n    console.error('営業時間のリセットエラー:', error);\n    return {\n      success: false,\n      message: '営業時間のリセットに失敗しました',\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["doc","setDoc","getDoc","db","initializeBusinessHours","businessHoursRef","existingDoc","exists","console","log","success","message","initialBusinessHours","monday","closed","open","close","tuesday","wednesday","thursday","friday","saturday","sunday","updatedAt","Date","data","error","resetBusinessHours"],"sources":["/Users/koukikaida/Desktop/booking/src/utils/initData.js"],"sourcesContent":["import { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../services/firebase';\n\n/**\n * 営業時間の初期データを設定\n */\nexport const initializeBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n    \n    // 既存データの確認\n    const existingDoc = await getDoc(businessHoursRef);\n    \n    if (existingDoc.exists()) {\n      console.log('営業時間データは既に存在します');\n      return { success: true, message: '営業時間データは既に存在します' };\n    }\n    \n    // 初期営業時間データ\n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    \n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間の初期データを設定しました');\n    \n    return { \n      success: true, \n      message: '営業時間の初期データを設定しました',\n      data: initialBusinessHours \n    };\n    \n  } catch (error) {\n    console.error('営業時間の初期化エラー:', error);\n    return { \n      success: false, \n      message: '営業時間の初期化に失敗しました',\n      error: error.message \n    };\n  }\n};\n\n/**\n * 開発用：営業時間データを強制初期化\n */\nexport const resetBusinessHours = async () => {\n  try {\n    const businessHoursRef = doc(db, 'businessHours', 'default');\n    \n    const initialBusinessHours = {\n      monday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      tuesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      wednesday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      thursday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      friday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"18:00\"\n      },\n      saturday: {\n        closed: false,\n        open: \"09:00\",\n        close: \"17:00\"\n      },\n      sunday: {\n        closed: true,\n        open: \"\",\n        close: \"\"\n      },\n      updatedAt: new Date()\n    };\n    \n    await setDoc(businessHoursRef, initialBusinessHours);\n    console.log('営業時間データをリセットしました');\n    \n    return { \n      success: true, \n      message: '営業時間データをリセットしました',\n      data: initialBusinessHours \n    };\n    \n  } catch (error) {\n    console.error('営業時間のリセットエラー:', error);\n    return { \n      success: false, \n      message: '営業時間のリセットに失敗しました',\n      error: error.message \n    };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}