{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { createBooking, getBookingsByDate, getBookingsByDateRange, getBookingCountByDateTime, checkDuplicateBooking, updateBooking, deleteBooking, subscribeToBookings, getBusinessHours, updateBusinessHours, generateTimeSlots } from '../services/bookingService';\nimport { formatDateString } from '../utils/dateUtils';\nexport const useBookings = () => {\n  _s();\n  const [bookings, setBookings] = useState([]);\n  const [businessHours, setBusinessHours] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 予約作成\n  const addBooking = async bookingData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // 重複チェック\n      const duplicateCheck = await checkDuplicateBooking(bookingData.customerName, new Date(bookingData.date), bookingData.time);\n      if (!duplicateCheck.success) {\n        setError(duplicateCheck.error);\n        return {\n          success: false,\n          error: duplicateCheck.error\n        };\n      }\n      if (duplicateCheck.exists) {\n        const errorMessage = '同じお客様の同じ時間の予約が既に存在します';\n        setError(errorMessage);\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n\n      // 満枠チェック\n      const countResult = await getBookingCountByDateTime(new Date(bookingData.date), bookingData.time);\n      if (!countResult.success) {\n        setError(countResult.error);\n        return {\n          success: false,\n          error: countResult.error\n        };\n      }\n      if (countResult.count >= 3) {\n        const errorMessage = 'この時間は満席です';\n        setError(errorMessage);\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n\n      // 予約作成\n      const result = await createBooking(bookingData);\n      if (result.success) {\n        return {\n          success: true,\n          id: result.id\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '予約の作成に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 指定日の予約取得\n  const loadBookingsByDate = useCallback(async date => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await getBookingsByDate(date);\n      if (result.success) {\n        setBookings(result.bookings);\n        return {\n          success: true,\n          bookings: result.bookings\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '予約の取得に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 指定期間の予約取得\n  const loadBookingsByDateRange = useCallback(async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await getBookingsByDateRange(startDate, endDate);\n      if (result.success) {\n        setBookings(result.bookings);\n        return {\n          success: true,\n          bookings: result.bookings\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '予約の取得に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 予約更新\n  const editBooking = async (bookingId, updateData) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await updateBooking(bookingId, updateData);\n      if (result.success) {\n        return {\n          success: true\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '予約の更新に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 予約削除\n  const removeBooking = async bookingId => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await deleteBooking(bookingId);\n      if (result.success) {\n        return {\n          success: true\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '予約の削除に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 営業時間取得\n  const loadBusinessHours = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await getBusinessHours();\n      if (result.success) {\n        setBusinessHours(result.businessHours);\n        return {\n          success: true,\n          businessHours: result.businessHours\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '営業時間の取得に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 営業時間更新\n  const saveBusinessHours = async newBusinessHours => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await updateBusinessHours(newBusinessHours);\n      if (result.success) {\n        setBusinessHours(newBusinessHours);\n        return {\n          success: true\n        };\n      } else {\n        setError(result.error);\n        return {\n          success: false,\n          error: result.error\n        };\n      }\n    } catch (error) {\n      const errorMessage = '営業時間の更新に失敗しました';\n      setError(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 特定時間の予約状況取得\n  const getBookingStatus = useCallback(async (date, time) => {\n    try {\n      const result = await getBookingCountByDateTime(date, time);\n      if (result.success) {\n        const count = result.count;\n        if (count === 0) return 'available'; // 空き\n        if (count < 3) return 'partial'; // 部分的\n        return 'full'; // 満席\n      }\n      return 'unknown';\n    } catch (error) {\n      console.error('予約状況取得エラー:', error);\n      return 'unknown';\n    }\n  }, []);\n\n  // エラーをクリア\n  const clearError = () => {\n    setError(null);\n  };\n\n  // 初期データ読み込み\n  useEffect(() => {\n    loadBusinessHours();\n  }, [loadBusinessHours]);\n  return {\n    // 状態\n    bookings,\n    businessHours,\n    loading,\n    error,\n    // アクション\n    addBooking,\n    loadBookingsByDate,\n    loadBookingsByDateRange,\n    editBooking,\n    removeBooking,\n    loadBusinessHours,\n    saveBusinessHours,\n    getBookingStatus,\n    clearError,\n    // ユーティリティ\n    generateTimeSlots\n  };\n};\n_s(useBookings, \"rydiWvLWwDYUzABAfXEBSsb6dl4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","createBooking","getBookingsByDate","getBookingsByDateRange","getBookingCountByDateTime","checkDuplicateBooking","updateBooking","deleteBooking","subscribeToBookings","getBusinessHours","updateBusinessHours","generateTimeSlots","formatDateString","useBookings","_s","bookings","setBookings","businessHours","setBusinessHours","loading","setLoading","error","setError","addBooking","bookingData","duplicateCheck","customerName","Date","date","time","success","exists","errorMessage","countResult","count","result","id","loadBookingsByDate","loadBookingsByDateRange","startDate","endDate","editBooking","bookingId","updateData","removeBooking","loadBusinessHours","saveBusinessHours","newBusinessHours","getBookingStatus","console","clearError"],"sources":["/Users/koukikaida/Desktop/booking/src/hooks/useBookings.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport {\n  createBooking,\n  getBookingsByDate,\n  getBookingsByDateRange,\n  getBookingCountByDateTime,\n  checkDuplicateBooking,\n  updateBooking,\n  deleteBooking,\n  subscribeToBookings,\n  getBusinessHours,\n  updateBusinessHours,\n  generateTimeSlots\n} from '../services/bookingService';\nimport { formatDateString } from '../utils/dateUtils';\n\nexport const useBookings = () => {\n  const [bookings, setBookings] = useState([]);\n  const [businessHours, setBusinessHours] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // 予約作成\n  const addBooking = async (bookingData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // 重複チェック\n      const duplicateCheck = await checkDuplicateBooking(\n        bookingData.customerName,\n        new Date(bookingData.date),\n        bookingData.time\n      );\n\n      if (!duplicateCheck.success) {\n        setError(duplicateCheck.error);\n        return { success: false, error: duplicateCheck.error };\n      }\n\n      if (duplicateCheck.exists) {\n        const errorMessage = '同じお客様の同じ時間の予約が既に存在します';\n        setError(errorMessage);\n        return { success: false, error: errorMessage };\n      }\n\n      // 満枠チェック\n      const countResult = await getBookingCountByDateTime(\n        new Date(bookingData.date),\n        bookingData.time\n      );\n\n      if (!countResult.success) {\n        setError(countResult.error);\n        return { success: false, error: countResult.error };\n      }\n\n      if (countResult.count >= 3) {\n        const errorMessage = 'この時間は満席です';\n        setError(errorMessage);\n        return { success: false, error: errorMessage };\n      }\n\n      // 予約作成\n      const result = await createBooking(bookingData);\n\n      if (result.success) {\n        return { success: true, id: result.id };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '予約の作成に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 指定日の予約取得\n  const loadBookingsByDate = useCallback(async (date) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await getBookingsByDate(date);\n\n      if (result.success) {\n        setBookings(result.bookings);\n        return { success: true, bookings: result.bookings };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '予約の取得に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 指定期間の予約取得\n  const loadBookingsByDateRange = useCallback(async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await getBookingsByDateRange(startDate, endDate);\n\n      if (result.success) {\n        setBookings(result.bookings);\n        return { success: true, bookings: result.bookings };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '予約の取得に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 予約更新\n  const editBooking = async (bookingId, updateData) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await updateBooking(bookingId, updateData);\n\n      if (result.success) {\n        return { success: true };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '予約の更新に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 予約削除\n  const removeBooking = async (bookingId) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await deleteBooking(bookingId);\n\n      if (result.success) {\n        return { success: true };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '予約の削除に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 営業時間取得\n  const loadBusinessHours = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await getBusinessHours();\n\n      if (result.success) {\n        setBusinessHours(result.businessHours);\n        return { success: true, businessHours: result.businessHours };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '営業時間の取得に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // 営業時間更新\n  const saveBusinessHours = async (newBusinessHours) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await updateBusinessHours(newBusinessHours);\n\n      if (result.success) {\n        setBusinessHours(newBusinessHours);\n        return { success: true };\n      } else {\n        setError(result.error);\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      const errorMessage = '営業時間の更新に失敗しました';\n      setError(errorMessage);\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 特定時間の予約状況取得\n  const getBookingStatus = useCallback(async (date, time) => {\n    try {\n      const result = await getBookingCountByDateTime(date, time);\n      \n      if (result.success) {\n        const count = result.count;\n        \n        if (count === 0) return 'available';      // 空き\n        if (count < 3) return 'partial';          // 部分的\n        return 'full';                            // 満席\n      }\n      \n      return 'unknown';\n    } catch (error) {\n      console.error('予約状況取得エラー:', error);\n      return 'unknown';\n    }\n  }, []);\n\n  // エラーをクリア\n  const clearError = () => {\n    setError(null);\n  };\n\n  // 初期データ読み込み\n  useEffect(() => {\n    loadBusinessHours();\n  }, [loadBusinessHours]);\n\n  return {\n    // 状態\n    bookings,\n    businessHours,\n    loading,\n    error,\n\n    // アクション\n    addBooking,\n    loadBookingsByDate,\n    loadBookingsByDateRange,\n    editBooking,\n    removeBooking,\n    loadBusinessHours,\n    saveBusinessHours,\n    getBookingStatus,\n    clearError,\n\n    // ユーティリティ\n    generateTimeSlots\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}